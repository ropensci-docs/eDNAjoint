[{"path":[]},{"path":"https://docs.ropensci.org/eDNAjoint/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting package developer maintainer ednajoint@gmail.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq/","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<eDNAjoint: an R package for interpreting paired environmental DNA and traditional surveys.> Copyright (C) <2024>  <Abigail Keller>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>."},{"path":"https://docs.ropensci.org/eDNAjoint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Abigail G. Keller. Author, maintainer. Ryan P. Kelly. Contributor. Chitra M. Saraswati. Reviewer. Saras M. Windecker. Reviewer.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keller (2024). eDNAjoint: Joint Modeling Traditional Environmental DNA Survey Data Bayesian Framework. R package version 0.2, https://docs.ropensci.org/eDNAjoint/, https://github.com/ropensci/eDNAjoint.","code":"@Manual{,   title = {eDNAjoint: Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework},   author = {Abigail G. Keller},   year = {2024},   note = {R package version 0.2, https://docs.ropensci.org/eDNAjoint/},   url = {https://github.com/ropensci/eDNAjoint}, }"},{"path":"https://docs.ropensci.org/eDNAjoint/index.html","id":"ednajoint","dir":"","previous_headings":"","what":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","title":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","text":"package eDNAjoint useful interpreting observations paired semi-paired environmental DNA (eDNA) traditional surveys. package runs Bayesian model integrates two data streams jointly estimate parameters like false positive probability eDNA detection expected catch rate site. Optional model variations allow inclusion site-level covariates scale sensitivity eDNA sampling relative traditional sampling, well estimation catchability coefficients multiple traditional gear types used. Additional functions package facilitate interpretation model fits.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","text":"stable version eDNAjoint can found Cran: can also install development version eDNAjoint ROpenSci:","code":"install.packages(\"eDNAjoint\") install.packages(\"eDNAjoint\", repos = \"https://ropensci.r-universe.dev\")"},{"path":"https://docs.ropensci.org/eDNAjoint/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","text":"main functionality eDNAjoint use jointModel() fit model data. functions like jointSummarize() detectionCalculate() can used help model fit interpretation. example fits joint model data paired, replicated eDNA qPCR seine sampling observations endangered tidewater gobies (Eucyclogobius newberryi) study Schmelzle Kinziger (2016). following variation joint model includes site-level covariates scale sensitivity eDNA sampling relative traditional sampling. model fit can accessed things like summarize posterior distribution probability false positive detection, p10p_{10}: find number eDNA samples traditional survey samples necessary detect presence species given expected catch rate:","code":"library(eDNAjoint) data(gobyData) # run the joint model with two covariates goby.fit <- jointModel(data = gobyData, cov = c('Filter_time','Salinity'),                         family = 'poisson', p10priors = c(1,20), q = FALSE) # summarize p10 posterior jointSummarize(goby.fit$model, par = 'p10') #>      mean se_mean    sd  2.5% 97.5%    n_eff Rhat #> p10 0.003       0 0.001 0.001 0.007 10934.87    1 # find the number of samples necessary to detect presence with 0.9 probability at the mean covariate values,  # if the expected catch rate (mu) is 0.1, 0.5, or 1 individuals/traditional survey unit. detectionCalculate(goby.fit$model, mu = c(0.1,0.5,1),                     cov.val = c(0,0), probability = 0.9) #>       mu n_traditional n_eDNA #> [1,] 0.1            24     14 #> [2,] 0.5             5      4 #> [3,] 1.0             3      2"},{"path":"https://docs.ropensci.org/eDNAjoint/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","text":"can find much detailed examples functions eDNAjoint model underlying package package vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","text":"Please note eDNAjoint released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Joint Modeling of Traditional and Environmental DNA Survey Data in a Bayesian Framework","text":"Keller, .G., Grason, E.W., McDonald, P.S., Ramon-Laca, ., Kelly, R.P. (2022). Tracking invasion front environmental DNA. Ecological Applications. 32(4): e2561. https://doi.org/10.1002/eap.2561 Schmelzle, M.C. Kinziger, .P. (2016). Using occupancy modelling compare environmental DNA traditional field methods regional-scale monitoring endangered aquatic species. Molecular Ecology Resources. 16(4): 895-908. https://doi.org/10.1111/1755-0998.12501","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionCalculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","title":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","text":"function calculates number survey effort units necessary detect species presence using median estimated parameter values jointModel(). Detecting species presence defined producing least one true positive eDNA detection catching least one individual. See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionCalculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","text":"","code":"detectionCalculate(modelfit, mu, cov.val = NULL, probability = 0.9, qPCR.N = 3)"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionCalculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","text":"modelfit object class stanfit. mu numeric vector species densities/capture rates. multiple traditional gear types represented model, mu catch rate gear type 1. cov.val numeric vector indicating values site-level covariates use prediction. Default NULL. probability numeric value indicating probability detecting presence. default 0.9. qPCR.N integer indicating number qPCR replicates per eDNA sample. default 3.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionCalculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","text":"summary table survey efforts necessary detect species presence, given mu, survey type.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionCalculate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","text":"fitting model, function checks ensure function possible given inputs. checks include: Input model fit object class 'stanfit'. Input mu numeric vector. Input probability univariate numeric value. model fit contains alpha, cov.val must provided. Input cov.val numeric. Input cov.val length number estimated covariates. Input model fit converged (.e. divergent transitions warm-). checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionCalculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the survey effort necessary to detect species presence, given the species expected catch rate. — detectionCalculate","text":"","code":"# \\donttest{ # Ex. 1: Calculating necessary effort for detection with site-level # covariates  # Load data data(gobyData)  # Fit a model including 'Filter_time' and 'Salinity' site-level covariates fit.cov <- jointModel(data = gobyData, cov = c('Filter_time','Salinity'),                       family = \"poisson\", p10priors = c(1,20), q = FALSE,                       multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 9.3e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.93 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.682 seconds (Warm-up) #> Chain 1:                1.727 seconds (Sampling) #> Chain 1:                2.409 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 5e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.5 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.869 seconds (Warm-up) #> Chain 2:                1.733 seconds (Sampling) #> Chain 2:                2.602 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 5e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.5 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.933 seconds (Warm-up) #> Chain 3:                1.741 seconds (Sampling) #> Chain 3:                2.674 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 5e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.5 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.655 seconds (Warm-up) #> Chain 4:                1.726 seconds (Sampling) #> Chain 4:                2.381 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Calculate at the mean covariate values # (covariates are standardized, so mean = 0) detectionCalculate(fit.cov$model, mu = seq(from = 0.1, to = 1, by = 0.1),                    cov.val = c(0,0), qPCR.N = 3) #>        mu n_traditional n_eDNA #>  [1,] 0.1            24     14 #>  [2,] 0.2            12      7 #>  [3,] 0.3             8      5 #>  [4,] 0.4             6      4 #>  [5,] 0.5             5      4 #>  [6,] 0.6             4      3 #>  [7,] 0.7             4      3 #>  [8,] 0.8             3      3 #>  [9,] 0.9             3      2 #> [10,] 1.0             3      2  # Calculate mu_critical at salinity 0.5 z-scores greater than the mean detectionCalculate(fit.cov$model, mu = seq(from = 0.1, to = 1, by = 0.1),                    cov.val = c(0,0.5), qPCR.N = 3) #>        mu n_traditional n_eDNA #>  [1,] 0.1            24     12 #>  [2,] 0.2            12      6 #>  [3,] 0.3             8      5 #>  [4,] 0.4             6      4 #>  [5,] 0.5             5      3 #>  [6,] 0.6             4      3 #>  [7,] 0.7             4      2 #>  [8,] 0.8             3      2 #>  [9,] 0.9             3      2 #> [10,] 1.0             3      2  # Ex. 2: Calculating necessary effort for detection with multiple traditional # gear types  # Load data data(greencrabData)  # Fit a model with no site-level covariates fit.q <- jointModel(data = greencrabData, cov = NULL, family = \"negbin\",                     p10priors = c(1,20), q = TRUE, multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000366 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.66 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.441 seconds (Warm-up) #> Chain 1:                11.336 seconds (Sampling) #> Chain 1:                14.777 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000284 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 2.84 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.654 seconds (Warm-up) #> Chain 2:                11.385 seconds (Sampling) #> Chain 2:                15.039 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000297 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 2.97 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.189 seconds (Warm-up) #> Chain 3:                10.934 seconds (Sampling) #> Chain 3:                14.123 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.00028 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 2.8 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.441 seconds (Warm-up) #> Chain 4:                10.21 seconds (Sampling) #> Chain 4:                13.651 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Calculate detectionCalculate(fit.q$model, mu = seq(from = 0.1, to = 1, by = 0.1),                    cov.val = NULL, qPCR.N = 3) #>        mu n_traditional_1 n_traditional_2 n_eDNA #>  [1,] 0.1              25              31     28 #>  [2,] 0.2              13              16     14 #>  [3,] 0.3               9              11     10 #>  [4,] 0.4               7               9      8 #>  [5,] 0.5               6               8      6 #>  [6,] 0.6               5               7      5 #>  [7,] 0.7               5               6      5 #>  [8,] 0.8               5               5      4 #>  [9,] 0.9               4               5      4 #> [10,] 1.0               4               5      4  # Change probability of detecting presence to 0.95 detectionCalculate(fit.q$model, mu = 0.1, cov.val = NULL,                    probability = 0.95, qPCR.N = 3) #>       mu n_traditional_1 n_traditional_2 n_eDNA #> [1,] 0.1              32              40     36 # }"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","title":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","text":"function plots number survey effort units necessary detect species presence, calculated using median estimated parameter values jointModel(). Detecting species presence defined producing least one true positive eDNA detection catching least one individual. See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","text":"","code":"detectionPlot(   modelfit,   mu.min,   mu.max,   cov.val = NULL,   probability = 0.9,   qPCR.N = 3 )"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","text":"modelfit object class stanfit. mu.min value indicating minimum expected species catch rate plotting. multiple traditional gear types represented model, mu catch rate gear type 1. mu.max value indicating maximum expected species catch rate plotting. multiple traditional gear types represented model, mu catch rate gear type 1. cov.val numeric vector indicating values site-level covariates use prediction. Default NULL. probability numeric value indicating probability detecting presence. default 0.9. qPCR.N integer indicating number qPCR replicates per eDNA sample. default 3.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","text":"plot displaying survey efforts necessary detect species presence, given mu, survey type.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionPlot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","text":"fitting model, function checks ensure function possible given inputs. checks include: Input model fit object class 'stanfit'. Input mu.min numeric value greater 0. Input mu.max numeric value. model fit contains alpha, cov.val must provided. Input cov.val numeric. Input cov.val length number estimated covariates. Input probability univariate numeric value. Input model fit converged (.e. divergent transitions warm-). checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/detectionPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the survey effort necessary to detect species presence, given the species expected catch rate. — detectionPlot","text":"","code":"# \\donttest{ # Ex. 1: Calculating necessary effort for detection with site-level # covariates  # Load data data(gobyData)  # Fit a model including 'Filter_time' and 'Salinity' site-level covariates fit.cov <- jointModel(data = gobyData, cov = c('Filter_time','Salinity'),                       family = \"poisson\", p10priors = c(1,20), q = FALSE,                       multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.5 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.906 seconds (Warm-up) #> Chain 1:                1.722 seconds (Sampling) #> Chain 1:                2.628 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 4.6e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.46 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.91 seconds (Warm-up) #> Chain 2:                1.682 seconds (Sampling) #> Chain 2:                2.592 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 4.8e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.48 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 1.174 seconds (Warm-up) #> Chain 3:                97.294 seconds (Sampling) #> Chain 3:                98.468 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 5.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.871 seconds (Warm-up) #> Chain 4:                1.731 seconds (Sampling) #> Chain 4:                2.602 seconds (Total) #> Chain 4:  #> Warning: There were 199 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: There were 2301 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See #> https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 1.06, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Plot at the mean covariate values (covariates are standardized, so mean=0) detectionPlot(fit.cov$model, mu.min = 0.1, mu.max = 1,               cov.val = c(0,0), qPCR.N = 3)   # Calculate mu_critical at salinity 0.5 z-scores greater than the mean detectionPlot(fit.cov$model, mu.min = 0.1, mu.max = 1, cov.val = c(0,0.5),               qPCR.N = 3)   # Ex. 2: Calculating necessary effort for detection with multiple # traditional gear types  # Load data data(greencrabData)  # Fit a model with no site-level covariates fit.q <- jointModel(data = greencrabData, cov = NULL, family = \"negbin\",                     p10priors = c(1,20), q = TRUE,                     multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000324 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.24 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.548 seconds (Warm-up) #> Chain 1:                10.361 seconds (Sampling) #> Chain 1:                13.909 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000288 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 2.88 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.321 seconds (Warm-up) #> Chain 2:                9.643 seconds (Sampling) #> Chain 2:                12.964 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000279 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 2.79 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.317 seconds (Warm-up) #> Chain 3:                8.712 seconds (Sampling) #> Chain 3:                12.029 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000331 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.31 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.608 seconds (Warm-up) #> Chain 4:                6.708 seconds (Sampling) #> Chain 4:                10.316 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Calculate detectionPlot(fit.q$model, mu.min = 0.1, mu.max = 1,               cov.val = NULL, qPCR.N = 3)   # Change probability of detecting presence to 0.95 detectionPlot(fit.q$model, mu.min = 0.1, mu.max = 1, cov.val = NULL,               probability = 0.95, qPCR.N = 3)  # }"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/eDNAjoint-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'eDNAjoint' package. — eDNAjoint-package","title":"The 'eDNAjoint' package. — eDNAjoint-package","text":"Models integrate environmental DNA (eDNA) detection data traditional survey data jointly estimate species catch rate (see Package Vignette). Models can used count data via traditional survey methods (.e., trapping, electrofishing, visual) replicated eDNA detection/nondetection data via polymerase chain reaction (.e., PCR qPCR) multiple survey locations. Estimated parameters include probability false positive eDNA detection, site-level covariates scale sensitivity eDNA surveys relative traditional surveys, catchability coefficients traditional gear types. Models implemented Bayesian framework (Markov chain Monte Carlo) using 'Stan' probabilistic programming language.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/eDNAjoint-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'eDNAjoint' package. — eDNAjoint-package","text":"Stan Development Team (NA). RStan: R interface Stan. https://mc-stan.org","code":""},{"path":[]},{"path":"https://docs.ropensci.org/eDNAjoint/reference/eDNAjoint-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'eDNAjoint' package. — eDNAjoint-package","text":"Maintainer: Abigail G. Keller agkeller@berkeley.edu contributors: Ryan P. Kelly rpkelly@uw.edu [contributor] Chitra M. Saraswati [reviewer] Saras M. Windecker [reviewer]","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/gobyData.html","id":null,"dir":"Reference","previous_headings":"","what":"gobyData — gobyData","title":"gobyData — gobyData","text":"gobyData","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/gobyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gobyData — gobyData","text":"","code":"gobyData"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/gobyData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gobyData — gobyData","text":"list four matrices representing eDNA sampling data (qPCR.N qPCR.K), seine sampling data (count), site-level covariate data (site.cov). qPCR.N Total number eDNA qPCR replicates site (row) eDNA sample replicate (column). Data includes 39 total sites maximum 22 eDNA sample replicates. NA indicates fewer eDNA samples collected maximum site. qPCR.K Total number positive eDNA qPCR detections site (row) eDNA sample replicate (column). Data includes 39 total sites maximum 22 eDNA sample replicates. NA indicates fewer eDNA samples collected maximum site. count Count goby individuals seine samples site (row) seine sample replicate (column). Data includes 39 total sites maximum 22 seine replicates. NA indicates fewer seine samples collected maximum site. site.cov Data representing site-level covariates site (row). Data includes mean salinity site ('Salinity'), mean time filter eDNA samples ('Filter_time'), density fish species ('Other_fishes'), size habitat ('Hab_size'), presence vegetation ('Veg'). non-integer covariate data standardized.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/gobyData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"gobyData — gobyData","text":"https://datadryad.org/stash/dataset/doi:10.5061/dryad.6rs23","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/gobyData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"gobyData — gobyData","text":"Schmelzle, M.C. Kinziger, .P. (2016). Using occupancy modelling compare environmental DNA traditional field methods regional-scale monitoring endangered aquatic species. Molecular Ecology Resources. 16(4): 895-908.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/greencrabData.html","id":null,"dir":"Reference","previous_headings":"","what":"greencrabData — greencrabData","title":"greencrabData — greencrabData","text":"greencrabData","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/greencrabData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"greencrabData — greencrabData","text":"","code":"greencrabData"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/greencrabData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"greencrabData — greencrabData","text":"list four matrices representing eDNA sampling data (qPCR.N qPCR.K) trap sampling data (count count.type). qPCR.N Total number eDNA qPCR replicates site (row) eDNA sample replicate (column). Data includes 20 total sites 5 eDNA sample replicates. qPCR.K Total number positive eDNA qPCR detections site (row) eDNA sample replicate (column). Data includes 20 total sites 5 eDNA sample replicates. count Count green crab individuals trap samples site (row) trap sample replicate (column). Data includes 20 total sites maximum 420 trap replicates. NA indicates fewer trap samples collected maximum site. count.type Integer indicating traditional gear type used site (row) trap sample replicate (column). '1' refers Fukui traps, '2' refers Minnow traps. Data includes 20 total sites maximum 420 trap replicates. NA indicates fewer trap samples collected maximum site.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/greencrabData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"greencrabData — greencrabData","text":"doi:10.6084/m9.figshare.15117102.v2","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/greencrabData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"greencrabData — greencrabData","text":"Keller, .G., Grason, E.W., McDonald, P.S., Ramon-Laca, ., Kelly, R.P. (2022). Tracking invasion front environmental DNA. Ecological Applications. 32(4): e2561. https://doi.org/10.1002/eap.2561","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","title":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","text":"function implements Bayesian model integrates data paired eDNA traditional surveys, described Keller et al. (2022) <doi.org/10.1002/eap.2561>. model estimates parameters including expected species catch rate probability false positive eDNA detection. function allows optional model variations, like inclusion site-level covariates scale sensitivity eDNA sampling relative traditional sampling, well estimation gear scaling coefficients scales relative catchability multiple traditional gear types. Model implemented using Bayesian inference using rstan package, uses Hamiltonian Monte Carlo simulate posterior distributions. See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","text":"","code":"jointModel(   data,   cov = NULL,   family = \"poisson\",   p10priors = c(1, 20),   q = FALSE,   phipriors = NULL,   multicore = FALSE,   initial_values = NULL,   n.chain = 4,   n.iter.burn = 500,   n.iter.sample = 2500,   thin = 1,   adapt_delta = 0.9,   verbose = TRUE,   seed = NULL )"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","text":"data list containing data necessary model fitting. Valid tags qPCR.N, qPCR.K, count, count.type, site.cov. qPCR.N qPCR.K matrices data frames first dimension equal number sites () second dimension equal maximum number eDNA samples given site (m). qPCR.N contains total number qPCR replicates per site eDNA sample, qPCR.K contains total number positive qPCR detections per site eDNA sample. count matrix data frame traditional survey count data, first dimension equal number sites () second dimension equal maximum number traditional survey replicates given site (j). count.type optional matrix data frame integers indicating gear type used corresponding count data, first dimension equal number sites () second dimension equal maximum number traditional survey replicates given site. Values integers beginning 1 (referring first gear type) n (last gear type). site.cov optional matrix data frame site-level covariate data, first dimension equal number sites (). site.cov include informative column names. Empty cells NA removed processing. Sites, , consistent qPCR, count, site covariate data. cov character vector indicating site-level covariates include model. Default value NULL. family distribution class used model traditional survey count data. Options include poisson ('poisson'), negative binomial ('negbin'), gamma ('gamma'). Default value 'poisson'. p10priors numeric vector indicating beta distribution hyperparameters (alpha, beta) used prior distribution eDNA false positive probability (p10). Default vector c(1,20). q logical value indicating whether estimate gear scaling coefficients, q, traditional survey gear types (TRUE) estimate gear scaling coefficients, q, traditional survey gear types (FALSE). Default value FALSE. phipriors numeric vector indicating gamma distribution hyperparameters (shape, rate) used prior distribution phi, overdispersion negative binomial distribution traditional survey gear data. Used family = 'negbin.' family = 'negbin', default vector c(0.25,0.25), otherwise, default NULL. multicore logical value indicating whether parallelize chains multiple cores. Default FALSE. initial_values list lists initial values use MCMC. length equal number MCMC chains. Initial values can provided parameters: beta, p10 (log-scale), mu, q, alpha. initial values provided, default random values drawn. n.chain Number MCMC chains. Default value 4. n.iter.burn Number warm-MCMC iterations. Default value 500. n.iter.sample Number sampling MCMC iterations. Default value 2500. thin positive integer specifying period saving samples. Default value 1. adapt_delta Numeric value 0 1 indicating target average acceptance probability used rstan::sampling. Default value 0.9. verbose Logical value controlling verbosity output (.e., warnings, messages, progress bar). Default TRUE. seed positive integer seed used random number generation MCMC. Default NULL, means seed generated 1 maximum integer supported R.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","text":"list : model object class stanfit returned rstan::sampling initial values used MCMC","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointModel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","text":"fitting model, function checks ensure model specification possible given data files. checks include: tags data valid (.e., include qPCR.N, qPCR.K, count, count.type, site.cov). Dimensions qPCR.N qPCR.K equal, dimensions count count.type equal (count.type provided). Number sites qPCR count data equal. data numeric (.e., integer NA). Empty data cells (NA) match qPCR.N qPCR.K count count.type. family either 'poisson', 'negbin', 'gamma'. p10priors phipriors (used) vector two numeric values. site.cov number rows qPCR.N count, present site.cov numeric, present cov values match column names site.cov, present checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify and fit joint model using count data from traditional surveys and eDNA qPCR data — jointModel","text":"","code":"# \\donttest{ # Ex. 1: Implementing the joint model  # Load data data(gobyData)  # Examine data in list names(gobyData) #> [1] \"qPCR.N\"   \"qPCR.K\"   \"count\"    \"site.cov\"  # Note that the surveyed sites (rows) should match in all data dim(gobyData$qPCR.N)[1] #> [1] 39 dim(gobyData$count)[1] #> [1] 39  # Fit a basic model with paired eDNA and traditional survey data. # Count data is modeled using a poisson distribution. fit <- jointModel(data = gobyData, family = \"poisson\", p10priors = c(1,20),                   multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 4.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.48 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.954 seconds (Warm-up) #> Chain 1:                1.728 seconds (Sampling) #> Chain 1:                2.682 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 4.4e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.44 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.982 seconds (Warm-up) #> Chain 2:                1.639 seconds (Sampling) #> Chain 2:                2.621 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 4.4e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.44 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 1.007 seconds (Warm-up) #> Chain 3:                1.797 seconds (Sampling) #> Chain 3:                2.804 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 4.5e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.45 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.894 seconds (Warm-up) #> Chain 4:                1.725 seconds (Sampling) #> Chain 4:                2.619 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Ex. 2: Implementing the joint model with site-level covariates  # With the same data, fit a model including 'Filter_time' and 'Salinity' # site-level covariates # These covariates will scale the sensitivity of eDNA sampling relative to # traditional surveys # Count data is modeled using a poisson distribution. fit.cov <- jointModel(data = gobyData, cov = c('Filter_time','Salinity'),                       family = \"poisson\", p10priors = c(1,20),                       multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 5.2e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.52 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.96 seconds (Warm-up) #> Chain 1:                1.75 seconds (Sampling) #> Chain 1:                2.71 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 5.1e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 5.15 seconds (Warm-up) #> Chain 2:                1.751 seconds (Sampling) #> Chain 2:                6.901 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 5.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.52 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.676 seconds (Warm-up) #> Chain 3:                1.763 seconds (Sampling) #> Chain 3:                2.439 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 4.7e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.47 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.952 seconds (Warm-up) #> Chain 4:                1.709 seconds (Sampling) #> Chain 4:                2.661 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips    # Ex. 3: Implementing the joint model with multiple traditional gear types  # Load data data(greencrabData)  # Examine data in list names(greencrabData) #> [1] \"qPCR.N\"     \"qPCR.K\"     \"count\"      \"count.type\"  # Note that the surveyed sites (rows) should match in all data dim(greencrabData$qPCR.N)[1] #> [1] 20 dim(greencrabData$count)[1] #> [1] 20  # Fit a model estimating a gear scaling coefficient for traditional survey # gear types. # This model does not assume all traditional survey methods have the same # catchability. # Count data is modeled using a negative binomial distribution. fit.q <- jointModel(data = greencrabData, cov = NULL, family = \"negbin\",                     p10priors = c(1,20), q = TRUE, phipriors = c(0.25,0.25),                     multicore = FALSE, initial_values = NULL,                     n.chain = 4, n.iter.burn = 500,                     n.iter.sample = 2500, thin = 1, adapt_delta = 0.9,                     verbose = TRUE, seed = 123) #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000283 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.83 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.426 seconds (Warm-up) #> Chain 1:                10.21 seconds (Sampling) #> Chain 1:                13.636 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000325 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.25 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.591 seconds (Warm-up) #> Chain 2:                8.674 seconds (Sampling) #> Chain 2:                12.265 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000321 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3.21 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.536 seconds (Warm-up) #> Chain 3:                11.201 seconds (Sampling) #> Chain 3:                14.737 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000307 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.07 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.407 seconds (Warm-up) #> Chain 4:                10.864 seconds (Sampling) #> Chain 4:                14.271 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips  # }"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform model selection using leave one out cross validation of model objects — jointSelect","title":"Perform model selection using leave one out cross validation of model objects — jointSelect","text":"function performs leave one cross validation list model fits using functions loo package, described Vehtari, Gelman, Gabry (2017) doi:10.1007/s11222-016-9696-4. Compare models fit using jointModel() models fits using traditionalModel(). See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform model selection using leave one out cross validation of model objects — jointSelect","text":"","code":"jointSelect(modelfits)"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform model selection using leave one out cross validation of model objects — jointSelect","text":"modelfits list containing model fits class stanfit.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform model selection using leave one out cross validation of model objects — jointSelect","text":"matrix delta elpd (expected log pointwise predictive density) model fits. Function performed using loo package.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSelect.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Perform model selection using leave one out cross validation of model objects — jointSelect","text":"model selection, function makes following check: Input list model fits class 'stanfit'. models compared fit wither either jointModel() traditionalModel(). checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform model selection using leave one out cross validation of model objects — jointSelect","text":"","code":"# \\donttest{ data(greencrabData)  # Fit a model without estimating a gear scaling coefficient for traditional # survey gear types. # This model assumes all traditional survey methods have the same # catchability. # Count data is modeled using a poisson distribution. fit.no.q <- jointModel(data = greencrabData, family = \"poisson\",                        p10priors = c(1,20), q = FALSE, multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 6.5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.65 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.947 seconds (Warm-up) #> Chain 1:                2.192 seconds (Sampling) #> Chain 1:                3.139 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.0001 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 1 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.89 seconds (Warm-up) #> Chain 2:                2.128 seconds (Sampling) #> Chain 2:                3.018 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 6.2e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.62 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.965 seconds (Warm-up) #> Chain 3:                1.5 seconds (Sampling) #> Chain 3:                2.465 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 6.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.61 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.916 seconds (Warm-up) #> Chain 4:                2.108 seconds (Sampling) #> Chain 4:                3.024 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips    # Fit a model estimating a gear scaling coefficient for traditional # survey gear types. # This model does not assume all traditional survey methods have the # same catchability. # Gear type 1 is used as the reference gear type. # Count data is modeled using a negative binomial distribution. fit.q <- jointModel(data = greencrabData, family = \"negbin\",                     p10priors = c(1,20), q = TRUE, multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000282 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.82 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.22 seconds (Warm-up) #> Chain 1:                8.039 seconds (Sampling) #> Chain 1:                11.259 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000323 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.23 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.339 seconds (Warm-up) #> Chain 2:                10.573 seconds (Sampling) #> Chain 2:                13.912 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000283 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 2.83 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.469 seconds (Warm-up) #> Chain 3:                8.674 seconds (Sampling) #> Chain 3:                12.143 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000292 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 2.92 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.552 seconds (Warm-up) #> Chain 4:                9.116 seconds (Sampling) #> Chain 4:                12.668 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Perform model selection jointSelect(modelfits = list(fit.no.q$model, fit.q$model)) #>        elpd_diff se_diff #> model2    0.0       0.0  #> model1 -164.8      39.0  # }"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSummarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize posterior distributions of model parameters. — jointSummarize","title":"Summarize posterior distributions of model parameters. — jointSummarize","text":"function summarizes posterior distributions specified parameters model fit. Summary includes mean, sd, specified quantiles, well effective sample size (n_eff) Rhat estimated parameters. See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSummarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize posterior distributions of model parameters. — jointSummarize","text":"","code":"jointSummarize(modelfit, par = \"all\", probs = c(0.025, 0.975), digits = 3)"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSummarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize posterior distributions of model parameters. — jointSummarize","text":"modelfit object class stanfit. par character vector parameter names. default ''. probs numeric vector quantiles interest. default c(0.025,0.975). digits integer indicating number decimal places round values summary table. Default value 3.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSummarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize posterior distributions of model parameters. — jointSummarize","text":"summary table parameter estimates.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSummarize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summarize posterior distributions of model parameters. — jointSummarize","text":"fitting model, function checks ensure function possible given inputs. checks include: Input model fit object class 'stanfit'. Input probs numeric vector. Input par character vector. Input par present fitted model. Input model fit converged (.e. divergent transitions warm-). checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/jointSummarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize posterior distributions of model parameters. — jointSummarize","text":"","code":"# \\donttest{ data(greencrabData)  # Fit a model modelfit <- jointModel(data = greencrabData, family = \"negbin\", q = TRUE,                        multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000284 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.84 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.428 seconds (Warm-up) #> Chain 1:                11.646 seconds (Sampling) #> Chain 1:                15.074 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000319 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.19 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.46 seconds (Warm-up) #> Chain 2:                8.28 seconds (Sampling) #> Chain 2:                11.74 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000319 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3.19 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.483 seconds (Warm-up) #> Chain 3:                11.4 seconds (Sampling) #> Chain 3:                14.883 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000317 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.17 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.528 seconds (Warm-up) #> Chain 4:                11.257 seconds (Sampling) #> Chain 4:                14.785 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Create summary table of all parameters jointSummarize(modelfit$model) #>           mean se_mean    sd  2.5%  97.5%     n_eff Rhat #> mu[1,1]  0.106   0.000 0.027 0.060  0.168 12359.010    1 #> mu[1,2]  0.084   0.000 0.022 0.046  0.134 12265.040    1 #> mu[2,1]  0.032   0.000 0.032 0.001  0.119 12956.182    1 #> mu[2,2]  0.026   0.000 0.026 0.001  0.095 13312.843    1 #> mu[3,1]  0.017   0.000 0.017 0.000  0.061 16304.617    1 #> mu[3,2]  0.013   0.000 0.013 0.000  0.048 16196.045    1 #> mu[4,1]  0.678   0.001 0.108 0.491  0.910 12094.958    1 #> mu[4,2]  0.535   0.001 0.091 0.378  0.732 13913.514    1 #> mu[5,1]  0.097   0.001 0.104 0.003  0.379 13798.872    1 #> mu[5,2]  0.077   0.001 0.082 0.002  0.299 13838.035    1 #> mu[6,1]  0.120   0.001 0.130 0.003  0.469 14507.672    1 #> mu[6,2]  0.095   0.001 0.102 0.002  0.364 14586.878    1 #> mu[7,1]  0.013   0.000 0.013 0.000  0.048 14219.485    1 #> mu[7,2]  0.010   0.000 0.010 0.000  0.037 14244.643    1 #> mu[8,1]  0.302   0.003 0.288 0.013  1.061 12800.478    1 #> mu[8,2]  0.238   0.002 0.228 0.010  0.841 13018.581    1 #> mu[9,1]  0.034   0.000 0.032 0.001  0.118 14154.367    1 #> mu[9,2]  0.027   0.000 0.025 0.001  0.093 13860.695    1 #> mu[10,1] 1.043   0.002 0.242 0.650  1.598 13086.667    1 #> mu[10,2] 0.821   0.001 0.186 0.511  1.243 15690.339    1 #> mu[11,1] 0.304   0.003 0.288 0.011  1.052 13071.798    1 #> mu[11,2] 0.240   0.002 0.228 0.009  0.847 12961.337    1 #> mu[12,1] 0.021   0.000 0.022 0.001  0.078 15261.777    1 #> mu[12,2] 0.017   0.000 0.017 0.000  0.062 14787.681    1 #> mu[13,1] 7.685   0.013 1.329 5.471 10.705 10691.991    1 #> mu[13,2] 6.046   0.008 0.995 4.393  8.295 14183.850    1 #> mu[14,1] 0.119   0.000 0.020 0.083  0.162 11994.137    1 #> mu[14,2] 0.094   0.000 0.016 0.065  0.128 15694.801    1 #> mu[15,1] 0.764   0.005 0.545 0.108  2.145 12631.143    1 #> mu[15,2] 0.602   0.004 0.431 0.085  1.691 12929.281    1 #> mu[16,1] 3.810   0.006 0.662 2.684  5.278 10382.789    1 #> mu[16,2] 2.994   0.004 0.474 2.188  4.042 14691.203    1 #> mu[17,1] 0.163   0.002 0.178 0.004  0.642 13153.765    1 #> mu[17,2] 0.128   0.001 0.141 0.003  0.509 12978.636    1 #> mu[18,1] 3.321   0.011 1.100 1.740  5.962 10493.096    1 #> mu[18,2] 2.616   0.009 0.864 1.361  4.679 10289.748    1 #> mu[19,1] 3.936   0.007 0.714 2.762  5.566  9979.501    1 #> mu[19,2] 3.103   0.005 0.576 2.144  4.413 12925.666    1 #> mu[20,1] 0.119   0.001 0.069 0.027  0.291 14453.422    1 #> mu[20,2] 0.094   0.000 0.054 0.021  0.228 14998.787    1 #> q[1]     0.794   0.001 0.103 0.612  1.016  7211.255    1 #> p10      0.018   0.000 0.010 0.005  0.042 11606.815    1 #> beta     1.264   0.002 0.249 0.782  1.753 10683.881    1 #> phi      0.918   0.001 0.131 0.692  1.199 11325.486    1  # Summarize just 'p10' parameter jointSummarize(modelfit$model, par = \"p10\", probs = c(0.025, 0.975),                digits = 3) #>      mean se_mean   sd  2.5% 97.5%    n_eff Rhat #> p10 0.018       0 0.01 0.005 0.042 11606.82    1 # }"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/muCritical.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mu_critical — muCritical","title":"Calculate mu_critical — muCritical","text":"function uses full posterior distributions parameters estimated jointModel() calculate mu_critical, expected catch rate probabilities false positive eDNA detection true positive eDNA detection equal. See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/muCritical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mu_critical — muCritical","text":"","code":"muCritical(modelfit, cov.val = NULL, ci = 0.9)"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/muCritical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mu_critical — muCritical","text":"modelfit object class stanfit cov.val numeric vector indicating values site-level covariates use prediction. Default NULL. ci Credible interval calculated using highest density interval (HDI). Default 0.9 (.e., 90% credible interval).","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/muCritical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mu_critical — muCritical","text":"list median mu_critical lower upper bounds credible interval. multiple gear types used, table mu_critical lower upper credible interval bounds returned one column gear type.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/muCritical.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate mu_critical — muCritical","text":"fitting model, function checks ensure function possible given inputs. checks include: Input model fit object class 'stanfit'. Input credible interval univariate numeric value greater 0 less 1. Input model fit contains p10 parameter. model fit contains alpha, cov.val must provided. Input cov.val numeric. Input cov.val length number estimated covariates. Input model fit converged (.e. divergent transitions warm-). checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/muCritical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mu_critical — muCritical","text":"","code":"# \\donttest{ # Ex. 1: Calculating mu_critical with site-level covariates  # Load data data(gobyData)  # Fit a model including 'Filter_time' and 'Salinity' site-level covariates fit.cov <- jointModel(data = gobyData, cov = c('Filter_time','Salinity'),                       family = \"poisson\", p10priors = c(1,20), q = FALSE,                       multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 4.8e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.48 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.736 seconds (Warm-up) #> Chain 1:                1.712 seconds (Sampling) #> Chain 1:                2.448 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 4.7e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.47 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 6.605 seconds (Warm-up) #> Chain 2:                1.732 seconds (Sampling) #> Chain 2:                8.337 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 4.9e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.49 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.751 seconds (Warm-up) #> Chain 3:                1.742 seconds (Sampling) #> Chain 3:                2.493 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_cov_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 4.5e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.45 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.667 seconds (Warm-up) #> Chain 4:                1.7 seconds (Sampling) #> Chain 4:                2.367 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Calculate mu_critical at the mean covariate values (covariates are # standardized, so mean = 0) muCritical(fit.cov$model, cov.val = c(0,0), ci = 0.9) #> $median #> [1] 0.005256258 #>  #> $lower_ci #> Highest Density Interval: 1.80e-03 #>  #> $upper_ci #> Highest Density Interval: 9.79e-03 #>   # Calculate mu_critical at habitat size 0.5 z-scores greater than the mean muCritical(fit.cov$model, cov.val = c(0,0.5), ci = 0.9) #> $median #> [1] 0.004406221 #>  #> $lower_ci #> Highest Density Interval: 1.39e-03 #>  #> $upper_ci #> Highest Density Interval: 8.16e-03 #>   # Ex. 2: Calculating mu_critical with multiple traditional gear types  # Load data data(greencrabData)  # Fit a model with no site-level covariates fit.q <- jointModel(data = greencrabData, cov = NULL, family = \"negbin\",                     p10priors = c(1,20), q = TRUE, multicore = FALSE) #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000392 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.92 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.663 seconds (Warm-up) #> Chain 1:                11.6 seconds (Sampling) #> Chain 1:                15.263 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000322 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.22 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.307 seconds (Warm-up) #> Chain 2:                11.452 seconds (Sampling) #> Chain 2:                14.759 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000329 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3.29 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.384 seconds (Warm-up) #> Chain 3:                10.851 seconds (Sampling) #> Chain 3:                14.235 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'joint_binary_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000325 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.25 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.442 seconds (Warm-up) #> Chain 4:                8.722 seconds (Sampling) #> Chain 4:                12.164 seconds (Total) #> Chain 4:  #> Refer to the eDNAjoint guide for visualization tips:  https://ednajoint.netlify.app/tips#visualization-tips   # Calculate mu_critical muCritical(fit.q$model, cov.val = NULL, ci = 0.9) #>               gear_1      gear_2 #> median   0.059070936 0.046617182 #> lower_ci 0.009265172 0.006740918 #> upper_ci 0.135199672 0.104594860 # }"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/traditionalModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","title":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","text":"function implements Bayesian model estimates expected species catch rate using count data traditional, non eDNA surveys. multiple traditional gear types used, optional variation allows estimation gear scaling coefficients, scale catchability gear types relative expected catch rate reference gear type. Model implemented using Bayesian inference using rstan package, uses Hamiltonian Monte Carlo simulate posterior distributions. See examples Package Vignette.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/traditionalModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","text":"","code":"traditionalModel(   data,   family = \"poisson\",   q = FALSE,   phipriors = NULL,   multicore = FALSE,   initial_values = NULL,   n.chain = 4,   n.iter.burn = 500,   n.iter.sample = 2500,   thin = 1,   adapt_delta = 0.9,   verbose = TRUE,   seed = NULL )"},{"path":"https://docs.ropensci.org/eDNAjoint/reference/traditionalModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","text":"data list containing data necessary model fitting. Valid tags count count.type. count matrix data frame traditional survey count data, first dimension equal number sites () second dimension equal maximum number traditional survey replicates given site (j). count.type optional matrix data frame integers indicating gear type (k) used corresponding count data, first dimension equal number sites () second dimension equal maximum number traditional survey replicates given site (j). Values integers beginning 1 (referring first gear type) n (last gear type). Empty cells NA removed processing. Sites, , consistent count data. family distribution class used model traditional survey count data. Options include poisson ('poisson'), negative binomial ('negbin'), gamma ('gamma'). Default value 'poisson'. q logical value indicating whether estimate gear scaling coefficients, q, traditional survey gear types (TRUE) estimate gear scaling coefficients, q, traditional survey gear types (FALSE). Default value FALSE. phipriors numeric vector indicating gamma distribution hyperparameters (shape, rate) used prior distribution phi, overdispersion negative binomial distribution traditional survey gear data. Used family = 'negbin.' family = 'negbin', default vector c(0.25,0.25), otherwise, default NULL. multicore logical value indicating whether parallelize chains multiple cores. Default FALSE. initial_values list lists initial values use MCMC. length equal number MCMC chains. Initial values can provided parameters: mu q. initial values provided, default random values drawn. n.chain Number MCMC chains. Default value 4. n.iter.burn Number warm-MCMC iterations. Default value 500. n.iter.sample Number sampling MCMC iterations. Default value 2500. thin positive integer specifying period saving samples. Default value 1. adapt_delta Numeric value 0 1 indicating target average acceptance probability used rstan::sampling. Default value 0.9. verbose Logical value controlling verbosity output (.e., warnings, messages, progress bar). Default TRUE. seed positive integer seed used random number generation MCMC. Default NULL, means seed generated 1 maximum integer supported R.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/traditionalModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","text":"list : model object class stanfit returned rstan::sampling initial values used MCMC","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/traditionalModel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","text":"fitting model, function checks ensure model specification possible given data files. checks include: tags data valid (.e., include count count.type). Number sites count count type data equal. data numeric (.e., integer NA). Empty data cells (NA) match count count.type. family 'poisson', 'negbin', 'gamma'. phipriors (used) vector two numeric values. checks fail, function returns error message.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/reference/traditionalModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify and fit model using count data from traditional, non eDNA surveys — traditionalModel","text":"","code":"# \\donttest{ # Load data data(greencrabData)  # Examine data in list # This function uses only traditional survey count data and optionally # the count type data names(greencrabData) #> [1] \"qPCR.N\"     \"qPCR.K\"     \"count\"      \"count.type\"  # Note that the surveyed sites (rows) should match in the data dim(greencrabData$count)[1] #> [1] 20 dim(greencrabData$count.type)[1] #> [1] 20  # Fit a model without estimating a gear scaling coefficient for traditional # survey gear types. # This model assumes all traditional survey methods have the same # catchability. # Count data is modeled using a poisson distribution. fit.no.q <- traditionalModel(data = greencrabData, family = \"poisson\",                              q = FALSE, phipriors = NULL, multicore = FALSE,                              verbose = TRUE) #>  #> SAMPLING FOR MODEL 'traditional_pois' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 5.1e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.678 seconds (Warm-up) #> Chain 1:                1.958 seconds (Sampling) #> Chain 1:                2.636 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'traditional_pois' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 5e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.5 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.772 seconds (Warm-up) #> Chain 2:                1.824 seconds (Sampling) #> Chain 2:                2.596 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'traditional_pois' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 4.9e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.49 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.69 seconds (Warm-up) #> Chain 3:                2.04 seconds (Sampling) #> Chain 3:                2.73 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'traditional_pois' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 5.1e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.733 seconds (Warm-up) #> Chain 4:                1.777 seconds (Sampling) #> Chain 4:                2.51 seconds (Total) #> Chain 4:    # Fit a model estimating a gear scaling coefficient for traditional survey # gear types. # This model does not assume all traditional survey methods have the same # catchability. # Count data is modeled using a negative binomial distribution. fit.q <- traditionalModel(data = greencrabData, family = \"negbin\", q = TRUE,                           phipriors = c(0.25,0.25), multicore = FALSE,                           initial_values = NULL, n.chain = 4,                           n.iter.burn = 500, n.iter.sample = 2500, thin = 1,                           adapt_delta = 0.9, verbose = TRUE, seed = 123) #>  #> SAMPLING FOR MODEL 'traditional_catchability_negbin' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000293 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.93 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 1: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 1: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 1: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 1: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 1: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.503 seconds (Warm-up) #> Chain 1:                7.771 seconds (Sampling) #> Chain 1:                11.274 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'traditional_catchability_negbin' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000305 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.05 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 2: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 2: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 2: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 2: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 2: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 2: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.578 seconds (Warm-up) #> Chain 2:                9.574 seconds (Sampling) #> Chain 2:                13.152 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'traditional_catchability_negbin' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000261 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 2.61 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 3: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 3: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 3: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 3: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 3: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 3: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.512 seconds (Warm-up) #> Chain 3:                8.169 seconds (Sampling) #> Chain 3:                11.681 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'traditional_catchability_negbin' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000306 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup) #> Chain 4: Iteration:  500 / 3000 [ 16%]  (Warmup) #> Chain 4: Iteration:  501 / 3000 [ 16%]  (Sampling) #> Chain 4: Iteration: 1000 / 3000 [ 33%]  (Sampling) #> Chain 4: Iteration: 1500 / 3000 [ 50%]  (Sampling) #> Chain 4: Iteration: 2000 / 3000 [ 66%]  (Sampling) #> Chain 4: Iteration: 2500 / 3000 [ 83%]  (Sampling) #> Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.247 seconds (Warm-up) #> Chain 4:                7.419 seconds (Sampling) #> Chain 4:                10.666 seconds (Total) #> Chain 4:  # }"},{"path":"https://docs.ropensci.org/eDNAjoint/news/index.html","id":"ednajoint-02","dir":"Changelog","previous_headings":"","what":"eDNAjoint 0.2","title":"eDNAjoint 0.2","text":"CRAN release: 2024-10-08 Package source code now hosted https://github.com/ropensci/eDNAjoint Improved programming (.e., reduced cyclomatic complexity, spacing, etc.) Added functionality accommodate semi-paired data (.e., traditional samples collected surveyed sites). Improved integration package print statements user guide. Updated default calculation initial values MCMC.","code":""},{"path":"https://docs.ropensci.org/eDNAjoint/news/index.html","id":"ednajoint-01","dir":"Changelog","previous_headings":"","what":"eDNAjoint 0.1","title":"eDNAjoint 0.1","text":"Initial version package GitHub.","code":""}]
